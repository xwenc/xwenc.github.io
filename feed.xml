<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-06-05T22:02:07+08:00</updated><id>http://localhost:4000/</id><title type="html">Andy Xiong’s blog</title><subtitle>You cannot improve your past, but you can improve your future. Once time is wasted, life is wasted.
</subtitle><author><name>Andy Xiong</name></author><entry><title type="html">MDN web documents</title><link href="http://localhost:4000/2018/06/05/mdn-docs.html" rel="alternate" type="text/html" title="MDN web documents" /><published>2018-06-05T00:00:00+08:00</published><updated>2018-06-05T00:00:00+08:00</updated><id>http://localhost:4000/2018/06/05/mdn-docs</id><content type="html" xml:base="http://localhost:4000/2018/06/05/mdn-docs.html">&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/&quot;&gt;https://developer.mozilla.org/en-US/&lt;/a&gt;&lt;/p&gt;</content><author><name>Andy Xiong</name></author><category term="frontend" /><summary type="html">https://developer.mozilla.org/en-US/</summary></entry><entry><title type="html">js模块化编程之彻底弄懂CommonJS和AMD/CMD！</title><link href="http://localhost:4000/2018/06/05/javascript-amd.html" rel="alternate" type="text/html" title="js模块化编程之彻底弄懂CommonJS和AMD/CMD！" /><published>2018-06-05T00:00:00+08:00</published><updated>2018-06-05T00:00:00+08:00</updated><id>http://localhost:4000/2018/06/05/javascript-amd</id><content type="html" xml:base="http://localhost:4000/2018/06/05/javascript-amd.html">&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/chenguangliang/p/5856701.html&quot;&gt;https://www.cnblogs.com/chenguangliang/p/5856701.html&lt;/a&gt;&lt;/p&gt;</content><author><name>Andy Xiong</name></author><category term="javascript" /><summary type="html">https://www.cnblogs.com/chenguangliang/p/5856701.html</summary></entry><entry><title type="html">Dialog flow</title><link href="http://localhost:4000/2018/06/05/dialogflow.html" rel="alternate" type="text/html" title="Dialog flow" /><published>2018-06-05T00:00:00+08:00</published><updated>2018-06-05T00:00:00+08:00</updated><id>http://localhost:4000/2018/06/05/dialogflow</id><content type="html" xml:base="http://localhost:4000/2018/06/05/dialogflow.html">&lt;p&gt;&lt;a href=&quot;https://dialogflow.com/docs/dialogs&quot;&gt;https://dialogflow.com/docs/dialogs&lt;/a&gt;&lt;/p&gt;</content><author><name>Andy Xiong</name></author><summary type="html">https://dialogflow.com/docs/dialogs</summary></entry><entry><title type="html">npm install、npm init、npm update、npm uninstall和package.json</title><link href="http://localhost:4000/2018/06/04/frontend-npm.html" rel="alternate" type="text/html" title="npm install、npm init、npm update、npm uninstall和package.json" /><published>2018-06-04T00:00:00+08:00</published><updated>2018-06-04T00:00:00+08:00</updated><id>http://localhost:4000/2018/06/04/frontend-npm</id><content type="html" xml:base="http://localhost:4000/2018/06/04/frontend-npm.html">&lt;p&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000010001155&quot;&gt;https://segmentfault.com/a/1190000010001155&lt;/a&gt;&lt;/p&gt;</content><author><name>Andy Xiong</name></author><category term="frontend" /><summary type="html">https://segmentfault.com/a/1190000010001155</summary></entry><entry><title type="html">React Router V4 document</title><link href="http://localhost:4000/2018/06/01/react-router-doc.html" rel="alternate" type="text/html" title="React Router V4 document" /><published>2018-06-01T00:00:00+08:00</published><updated>2018-06-01T00:00:00+08:00</updated><id>http://localhost:4000/2018/06/01/react-router-doc</id><content type="html" xml:base="http://localhost:4000/2018/06/01/react-router-doc.html">&lt;p&gt;&lt;a href=&quot;https://github.com/react-translate-team/react-router-CN&quot;&gt;https://github.com/react-translate-team/react-router-CN&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://reacttraining.cn/web/guides/quick-start&quot;&gt;http://reacttraining.cn/web/guides/quick-start&lt;/a&gt;&lt;/p&gt;</content><author><name>Andy Xiong</name></author><category term="react" /><summary type="html">https://github.com/react-translate-team/react-router-CN</summary></entry><entry><title type="html">构建你自己的 redux-saga</title><link href="http://localhost:4000/2018/05/29/react-redux-saga.html" rel="alternate" type="text/html" title="构建你自己的 redux-saga" /><published>2018-05-29T00:00:00+08:00</published><updated>2018-05-29T00:00:00+08:00</updated><id>http://localhost:4000/2018/05/29/react-redux-saga</id><content type="html" xml:base="http://localhost:4000/2018/05/29/react-redux-saga.html">&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/37356948&quot;&gt;https://zhuanlan.zhihu.com/p/37356948&lt;/a&gt;&lt;/p&gt;</content><author><name>Andy Xiong</name></author><category term="react" /><summary type="html">https://zhuanlan.zhihu.com/p/37356948</summary></entry><entry><title type="html">Decimal</title><link href="http://localhost:4000/2018/05/29/elixir-decimal.html" rel="alternate" type="text/html" title="Decimal" /><published>2018-05-29T00:00:00+08:00</published><updated>2018-05-29T00:00:00+08:00</updated><id>http://localhost:4000/2018/05/29/elixir-decimal</id><content type="html" xml:base="http://localhost:4000/2018/05/29/elixir-decimal.html">&lt;p&gt;&lt;a href=&quot;https://hexdocs.pm/decimal/readme.html&quot;&gt;https://hexdocs.pm/decimal/readme.html&lt;/a&gt;&lt;/p&gt;</content><author><name>Andy Xiong</name></author><category term="elixir" /><summary type="html">https://hexdocs.pm/decimal/readme.html</summary></entry><entry><title type="html">JavaScript Algorithms and Data Structures</title><link href="http://localhost:4000/2018/05/25/js-algorithms-data-structures.html" rel="alternate" type="text/html" title="JavaScript Algorithms and Data Structures" /><published>2018-05-25T00:00:00+08:00</published><updated>2018-05-25T00:00:00+08:00</updated><id>http://localhost:4000/2018/05/25/js-algorithms-data-structures</id><content type="html" xml:base="http://localhost:4000/2018/05/25/js-algorithms-data-structures.html">&lt;p&gt;&lt;a href=&quot;https://github.com/trekhleb/javascript-algorithms&quot;&gt;https://github.com/trekhleb/javascript-algorithms&lt;/a&gt;&lt;/p&gt;</content><author><name>Andy Xiong</name></author><category term="algorithm" /><summary type="html">https://github.com/trekhleb/javascript-algorithms</summary></entry><entry><title type="html">CSS3: @media 查询</title><link href="http://localhost:4000/2018/05/22/css-media.html" rel="alternate" type="text/html" title="CSS3: @media 查询" /><published>2018-05-22T00:00:00+08:00</published><updated>2018-05-22T00:00:00+08:00</updated><id>http://localhost:4000/2018/05/22/css-media</id><content type="html" xml:base="http://localhost:4000/2018/05/22/css-media.html">&lt;p&gt;&lt;a href=&quot;http://www.runoob.com/cssref/css3-pr-mediaquery.html&quot;&gt;http://www.runoob.com/cssref/css3-pr-mediaquery.html&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//pc, media
@media screen and (max-width: 300px) {
    body {
        background-color:lightblue;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//printer
@media print {
    body {
        background-color:lightblue;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//call printer
&amp;lt;button onClick=&quot;window.print()&quot;&amp;gt;print&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Andy Xiong</name></author><category term="css" /><summary type="html">http://www.runoob.com/cssref/css3-pr-mediaquery.html</summary></entry><entry><title type="html">All Questions - Answers about Elixir</title><link href="http://localhost:4000/2018/05/19/qa-elixir.html" rel="alternate" type="text/html" title="All Questions - Answers about Elixir" /><published>2018-05-19T00:00:00+08:00</published><updated>2018-05-19T00:00:00+08:00</updated><id>http://localhost:4000/2018/05/19/qa-elixir</id><content type="html" xml:base="http://localhost:4000/2018/05/19/qa-elixir.html">&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;如何快速上手？&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://elixir-lang.org/getting-started/introduction.html&quot;&gt;https://elixir-lang.org/getting-started/introduction.html&lt;/a&gt; 这里有些快速上手的简介，可以随时查些语法，有啥不懂的随时喊我。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;如何拼接字符串？&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bid.user.account.user_name &amp;lt;&amp;gt; &quot;You&quot;&lt;/code&gt;
  &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;#{bid.user.account.user_name}  You&quot;&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;还有两个和其他语言不太一样的地方，
  &lt;code class=&quot;highlighter-rouge&quot;&gt;foo = [1,2,3] 
  [0 | foo]
  //result [0,1,2,3]
  &lt;/code&gt;
  &lt;code class=&quot;highlighter-rouge&quot;&gt;foo = [1,2,3] bar=[4,5,6]
foo ++ bar 
  //result [1,2,3,4,5,6]
  &lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;:leaseprice 不是个字符串?&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;不是，这种东西在 elixir 和 ruby 里是个独立的变量类型，叫 symbol。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Form里怎么把 f 传给局部模板呢？&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;render 模板传变量有两种：
  &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;%= render &quot;_coupon.html&quot;, coupon: @product.coupon, current_user: @current_user %&amp;gt;&lt;/code&gt;
  如果传f,就是这样
  &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;%= render &quot;_coupon.html&quot;,  f: f %&amp;gt;&lt;/code&gt;
  在局部模板中就可以使用f了，注意在局部模板中得通过 @ 使用变量， 例如 @f。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;f是什么？&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;主模版中 fn f -&amp;gt; ，相当于在回调函数中，使用了  f  这个局部变量，所以如果在主模版    的回调中，就可以直接 input f 这样用，
&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;%= render &quot;xxx&quot;, f: f %&amp;gt;&lt;/code&gt; 第一个f代表局部模版中的模版变量，第二个代表在当前作用域中的局部变量，也就是回调中的 f，
这样在局部模版中使用这个 模版变量 的时候，就可以 @f，这样来使用
如果是 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;%= render &quot;xxx&quot;, form: f %&amp;gt;&lt;/code&gt;，那在局部模版中使用 “form” 这个模版变量，就得 @form 这样来用了
现在的情况，局部模版的 模版变量 和 主模版的局部变量刚好名字一样，都是 f。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;elixir 跟 ruby是啥关系， ruby的语法 elixir 都支持是吗？&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;elixir 参考了 ruby 的部分语法，但是 elixir 实在 erlang 虚拟机上开发的纯函数式语言，没对象，没循环，会编译成 erlang，然后底层使用的 actor 模型进行并发的，elixir 和 erlang 的精髓就是 actor 并发模型，这东西基本算是分布式的主流，据说是移动电话的电信交换器就是用这东西开发的。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Decimal是个方法吗？&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;在 elixir 类似 Decimal 这种大写开头的叫 module，里面包含方法。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;|&amp;gt;&lt;/code&gt; &lt;strong&gt;这是啥意思？&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;使用 module 的方法，就要 module-name.fun-name，类似 Decimal.mult
&lt;code class=&quot;highlighter-rouge&quot;&gt;Decimal.mult(p.amount, Decimal.new(p.units)) |&amp;gt; Decimal.round(2) |&amp;gt; Decimal.to_string(:normal)&lt;/code&gt;&lt;/p&gt;
    &lt;ol&gt;
      &lt;li&gt;Decimal.new 将  p.units 这个 int 转换为了 decimal&lt;/li&gt;
      &lt;li&gt;Decimal.mult 将两个 decimals 相乘&lt;/li&gt;
      &lt;li&gt;Decimal.round 保留两位精度&lt;/li&gt;
      &lt;li&gt;Decimal.to_string(:normal) 转换为无指数的字符串，类似 10000.00，如果是 Decimal.to_string(: raw) 就是有指数的，类似 1e3 这种。&lt;/li&gt;
    &lt;/ol&gt;

    &lt;p&gt;特别说一下 管道符 “|&amp;gt;” ，符号左边的会作为符号右边的函数的第一个参数，
类似 xxx |&amp;gt; Decimal.round(2) ，其实就是 Decimal.round(xxx, 2)
类似于面向对象语法里的 对象链式调用， foo.bar.baz，函数式里通过这种方式避免套括号。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;^x&lt;/code&gt;  &lt;strong&gt;这是啥意思？&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;是这样的这里如果直接使用 x ，那么相当于把 case 里的值，这里是 10 赋值给了 x ，   如果使用了 ^x，就是使用外部的变量 x 的值和 case 的 10 就行比较&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;管道符的话，会不会出现异步的情况，会不会发生阻塞？&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;一般情况下不会，elixir 并发用的叫做 actor 的模型，如果管道中有一个东西是需要实时回复的同步的 actor 的话，估计可能会阻塞，之后如果看到 gen_server 会有相关的东西，关于actor模型参考：
  &lt;a href=&quot;https://www.jianshu.com/p/449850aa8e82&quot;&gt;https://www.jianshu.com/p/449850aa8e82&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://www.brianstorti.com/the-actor-model/&quot;&gt;https://www.brianstorti.com/the-actor-model/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;list 和 tuple 有什么区别&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;classes \ [] 是代表默认参数是个空的 list，List 这个 module 里的方法都是操作 list 的，就是 [1, 2, 3]，elixir 里面没数组，只有 list
&lt;a href=&quot;https://hexdocs.pm/elixir/List.html&quot;&gt;https://hexdocs.pm/elixir/List.html&lt;/a&gt;
需要哪个函数，可以直接查用法。
&lt;a href=&quot;https://hexdocs.pm/elixir/Tuple.html&quot;&gt;https://hexdocs.pm/elixir/Tuple.html&lt;/a&gt;
这个和 list 类似，但是有几个区别&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;list 其实就是个数据结构中的链表，&lt;code class=&quot;highlighter-rouge&quot;&gt;[&quot;foo&quot; | foo]&lt;/code&gt; 其实就是在链表头添加一个新的元素&lt;/li&gt;
      &lt;li&gt;tuple 其实就是个数据结构中固定元素大小的数组&lt;/li&gt;
      &lt;li&gt;list 用来存储大量数据，和其他语言的 array 类似&lt;/li&gt;
      &lt;li&gt;tuple 一般存储少量数据，一般作为函数的参数和返回值来用。&lt;/li&gt;
    &lt;/ol&gt;

    &lt;p&gt;list 放元素是直接放到第一个位置，所以时间复杂度是 O(1)，但是 tuple 是放到最后一个位置，时间复杂度是 O(n)，tuple 也可以放新东西，但是会没有 list 快
但是固定元素的 tuple，读取起来非常快，是 O(1)。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;view 里函数如何输出html标签&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/images/2018-05-30-01.png&quot; alt=&quot;&quot; /&gt;
用 content_tag 方法，如果返回多个，要放在 [] 里面，elixir 里还有个好玩的东西叫模式匹配，函数的参数个数不一样，会认为是不同的函数，例如：&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  `def product_total_amount(product) do
  ....
  end

  def product_total_amount(product, units_type) do
  ....
  end

  //参数的值不一样，会执行不同的函数，例如

  def product_total_amount(product, &quot;Blank pots&quot;) do
  ...
  end

  def product_total_amount(product, _) do
  ...
  end

  //所以，可以这样玩

  def product_total_amount(product) do
   product_total_amount(product, product.units_type) 
  end

  def product_total_amount(product, &quot;Blank pots&quot;) do
  &quot;This is blank pots&quot;
  end

  def product_total_amount(product, _) do
  &quot;This is other types&quot;
  end`
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;只要满足上面的函数 下面的就不执行啦？对的 从上往下进行匹配, 哇塞，这连if 都不需要用了, 嗯 一些 elixir 的项目里，if 和循环都用的比较少，基本都是这种方式来实现 if 和递归&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;如何控制请求哪个模板用哪些函数？&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;如果请求的controller是和 view 同名的，就可以直接用 view 里的东西，
简单的方法，请求的时候看 log，如果请求的是 ProductController，那就可以直接用 ProductView，如果请求的是 Seller.ProductController 那就可以用 Seller.ProductView ，其他的类似。&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/images/2018-05-30-02.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;类似这个，请求的是 PageController，那就可以在模版里直接用 PageView 的东西&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Andy Xiong</name></author><category term="elixir" /><summary type="html">如何快速上手？</summary></entry></feed>