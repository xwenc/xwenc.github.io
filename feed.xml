<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-04-02T10:50:04+08:00</updated><id>http://localhost:4000/</id><title type="html">Andy Xiong’s blog</title><subtitle>You cannot improve your past, but you can improve your future. Once time is wasted, life is wasted.
</subtitle><author><name>Andy Xiong</name></author><entry><title type="html">Webflow styling rule</title><link href="http://localhost:4000/2018/03/30/webflow-styling-rule.html" rel="alternate" type="text/html" title="Webflow styling rule" /><published>2018-03-30T00:00:00+08:00</published><updated>2018-03-30T00:00:00+08:00</updated><id>http://localhost:4000/2018/03/30/webflow-styling-rule</id><content type="html" xml:base="http://localhost:4000/2018/03/30/webflow-styling-rule.html">&lt;ol&gt;
  &lt;li&gt;The orange indicators mean.&lt;/li&gt;
  &lt;li&gt;The blue  indicators mean.&lt;/li&gt;
  &lt;li&gt;Combo classes.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the Style Panel, orange indicators tell us that a value is being inherited from somewhere else. If we click that orange indicator, we can see exactly where the style is coming from.&lt;/p&gt;

&lt;p&gt;If our current class or tag has its own value for something, that’s indicated in blue.&lt;/p&gt;

&lt;p&gt;So when we collapse these style sections — when these panes are collapsed, the blue and orange indicators are giving us a quick overview so we can glance and see what’s affecting the current class or tag.&lt;/p&gt;

&lt;p&gt;Now, we can also use the Inheritance Menu to quickly visualize and select from the different classes and tags affecting our current styling. We can make a change — in this case we’re changing the font — then, at any time, go right back to where we were styling.&lt;/p&gt;

&lt;p&gt;So. We have the top section which contains our Selector field: show’s what we’re styling.&lt;/p&gt;

&lt;p&gt;We have our style sections, which can collapse or expand — these panes give us control over all our CSS properties — all our styling options.&lt;/p&gt;

&lt;p&gt;And finally, we have orange and blue indicators. Orange means whatever we’re styling is inheriting a value from something else, and blue means we’ve added or styled something on the current class or tag.&lt;/p&gt;

&lt;p&gt;We’ll cover all of this comprehensively — but this is a good overview of the layout and the anatomy of the Style Panel.&lt;/p&gt;

&lt;p&gt;Sometimes it’s impractical to create separate classes every time you want to make a change. If we’ve taken the time to create the most glorious heading on the planet, and we want to use that class as a starting point for a variation? If we want the same thing somewhere else but in light blue? We could create a new class and go through the entire process again. Or we can use a Combo Class.&lt;/p&gt;</content><author><name>Andy Xiong</name></author><category term="webflow" /><summary type="html">The orange indicators mean. The blue indicators mean. Combo classes.</summary></entry><entry><title type="html">Webflow flexbox</title><link href="http://localhost:4000/2018/03/30/webflow-flexbox.html" rel="alternate" type="text/html" title="Webflow flexbox" /><published>2018-03-30T00:00:00+08:00</published><updated>2018-03-30T00:00:00+08:00</updated><id>http://localhost:4000/2018/03/30/webflow-flexbox</id><content type="html" xml:base="http://localhost:4000/2018/03/30/webflow-flexbox.html">&lt;h2 id=&quot;introduce--example&quot;&gt;introduce &amp;amp; example&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://css-tricks.com/snippets/css/a-guide-to-flexbox/&quot;&gt;https://css-tricks.com/snippets/css/a-guide-to-flexbox/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://flex-box-3f77e3.webflow.io/&quot;&gt;http://flex-box-3f77e3.webflow.io/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;flexbox-sass-mixin&quot;&gt;flexbox sass mixin&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://gist.github.com/richardtorres314/26b18e12958ba418bb37993fdcbfc1bd&quot;&gt;https://gist.github.com/richardtorres314/26b18e12958ba418bb37993fdcbfc1bd&lt;/a&gt;
&lt;a href=&quot;https://github.com/jonathantneal/flexibility&quot;&gt;https://github.com/jonathantneal/flexibility&lt;/a&gt;&lt;/p&gt;</content><author><name>Andy Xiong</name></author><category term="webflow" /><summary type="html">introduce &amp;amp; example</summary></entry><entry><title type="html">C语言第八章-运算符和表达式</title><link href="http://localhost:4000/2018/03/04/c-language-learning-chapter-eight.html" rel="alternate" type="text/html" title="C语言第八章-运算符和表达式" /><published>2018-03-04T00:00:00+08:00</published><updated>2018-03-04T00:00:00+08:00</updated><id>http://localhost:4000/2018/03/04/c-language-learning-chapter-eight</id><content type="html" xml:base="http://localhost:4000/2018/03/04/c-language-learning-chapter-eight.html">&lt;h2 id=&quot;算数运算符&quot;&gt;算数运算符&lt;/h2&gt;
&lt;p&gt;在C语言中，除法 ‘/’ 的运算结果与运算对象的数据类型有关。如果是整型那么商也是整型，如果有一个是浮点型，那么结果就是浮点型。&lt;/p&gt;

&lt;p&gt;求余 ‘%’ 的对象必须是整数，运算的结果是整除后的余数。运算结果的符号与被除数的符号相同。&lt;/p&gt;

&lt;h2 id=&quot;关系运算符&quot;&gt;关系运算符&lt;/h2&gt;
&lt;h2 id=&quot;逻辑运算符&quot;&gt;逻辑运算符&lt;/h2&gt;
&lt;p&gt;&amp;amp;&amp;amp;短路与， ||短路或&lt;/p&gt;
&lt;h2 id=&quot;赋值运算符&quot;&gt;赋值运算符&lt;/h2&gt;
&lt;h2 id=&quot;运算符的优先级&quot;&gt;运算符的优先级&lt;/h2&gt;
&lt;p&gt;算术运算符 &amp;gt; 关系运算符 &amp;gt; 逻辑运算符 &amp;gt; 赋值运算符&lt;/p&gt;</content><author><name>Andy Xiong</name></author><category term="c" /><summary type="html">算数运算符 在C语言中，除法 ‘/’ 的运算结果与运算对象的数据类型有关。如果是整型那么商也是整型，如果有一个是浮点型，那么结果就是浮点型。</summary></entry><entry><title type="html">C语言第七章-scanf的用法</title><link href="http://localhost:4000/2018/02/25/c-language-learning-chapter-seven.html" rel="alternate" type="text/html" title="C语言第七章-scanf的用法" /><published>2018-02-25T00:00:00+08:00</published><updated>2018-02-25T00:00:00+08:00</updated><id>http://localhost:4000/2018/02/25/c-language-learning-chapter-seven</id><content type="html" xml:base="http://localhost:4000/2018/02/25/c-language-learning-chapter-seven.html">&lt;h2 id=&quot;概述&quot;&gt;概述&lt;/h2&gt;
&lt;p&gt;函数原型：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# include &amp;lt;stdio.h&amp;gt;

init scanf(const char *format, ...);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;两种格式：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;scanf(“输入控制符”, 输入参数 );
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# include &amp;lt;stdio.h&amp;gt;
int main(void)
{
 int i;
 scanf(&quot;%d&quot;, &amp;amp;i);
 printf(&quot;i = %d\n&quot;, i);
 return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;注意事项&quot;&gt;注意事项&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;输入参数顺序和个数一定要一一对应。&lt;/li&gt;
  &lt;li&gt;输入的数据类型一定要与所需要的数据类型一致。&lt;/li&gt;
  &lt;li&gt;在使用scanf之前使用printf提示输入。&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Andy Xiong</name></author><category term="c" /><summary type="html">概述 函数原型： ``` include</summary></entry><entry><title type="html">C语言第六章-printf的用法</title><link href="http://localhost:4000/2018/02/23/c-language-learning-chapter-six.html" rel="alternate" type="text/html" title="C语言第六章-printf的用法" /><published>2018-02-23T00:00:00+08:00</published><updated>2018-02-23T00:00:00+08:00</updated><id>http://localhost:4000/2018/02/23/c-language-learning-chapter-six</id><content type="html" xml:base="http://localhost:4000/2018/02/23/c-language-learning-chapter-six.html">&lt;h2 id=&quot;printf-的格式&quot;&gt;printf 的格式&lt;/h2&gt;
&lt;p&gt;printf 函数的原型为：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

int printf(const char *format, ...);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;printf 的格式有4种：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;printf(“字符串 \n”);
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
int main(void){
 int printf(&quot;Hello World!\n&quot;);
	
 return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;printf(“ 输出控制符 “， 输出参数)；
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
int main(void){
 int i = 10;
	
 printf(&quot;%d\n&quot;, i);
	
 return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;printf(“输出控制符1 输出控制符2…”, 输出参数1, 输出参数2, …);
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
int main(void){
 int i = 10;
 int j = 3;
	
 printf(&quot;%d %d\n&quot;, i, j);
	
 return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;输出控制符&quot;&gt;输出控制符&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;%d: 十进制整型;&lt;/li&gt;
  &lt;li&gt;%ld: 长整型;&lt;/li&gt;
  &lt;li&gt;%md: m指定输出字段的宽度。如果数据位数小于m，则左端补空格，若大于m，则按十几位数输出；&lt;/li&gt;
  &lt;li&gt;%u: 输出无符号整型(unsigned)；&lt;/li&gt;
  &lt;li&gt;%c: 输出字符；&lt;/li&gt;
  &lt;li&gt;%f: 输出用来输出实数，包括单精度和双精度，以小数形式输出。小数最多6位，超过6位四舍五入；&lt;/li&gt;
  &lt;li&gt;%.mf: 输出实数小数点后保留m位；&lt;/li&gt;
  &lt;li&gt;%o: 以八进制整数形式输出；&lt;/li&gt;
  &lt;li&gt;%s: 输出字符串；&lt;/li&gt;
  &lt;li&gt;%x: 以十六进制形式输出整数；&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;xxxx-的区别&quot;&gt;%x、%X、%#x、%#X 的区别&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

int main(void){
	int i = 47;

	printf(&quot;%x\n&quot;, i);
	printf(&quot;%X\n&quot;, i);
	printf(&quot;%#x\n&quot;, i);
	printf(&quot;%#X\n&quot;, i);
	
	return 0;
}
/*
* 2f
* 2F
* 0x2f
* 0X2F
*/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Andy Xiong</name></author><category term="c" /><summary type="html">printf 的格式 printf 函数的原型为： ``` #include</summary></entry><entry><title type="html">C语言第五章-预备知识</title><link href="http://localhost:4000/2018/02/21/c-language-learning-chapter-one.html" rel="alternate" type="text/html" title="C语言第五章-预备知识" /><published>2018-02-21T00:00:00+08:00</published><updated>2018-02-21T00:00:00+08:00</updated><id>http://localhost:4000/2018/02/21/c-language-learning-chapter-one</id><content type="html" xml:base="http://localhost:4000/2018/02/21/c-language-learning-chapter-one.html">&lt;h2 id=&quot;cpu如何操作内存&quot;&gt;CPU如何操作内存。&lt;/h2&gt;
&lt;p&gt;CPU对内存进行操作通过三根总线: 控制总线、地址总线、数据总线&lt;/p&gt;
&lt;h2 id=&quot;程序的运行&quot;&gt;程序的运行&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# include &amp;lt;stdio.h&amp;gt;
int main(void)
{
	printf(&quot;HelloWorld!\n&quot;);
	return 0;
}	
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在 sublime 编辑器下 按下组合键“Ctrl“+“Shift“+“b“就会弹出编译命令选择窗口&lt;/p&gt;
&lt;h2 id=&quot;字节&quot;&gt;字节&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;字节是存储数据的基本单位，位是存储数据的最小单位。&lt;/li&gt;
  &lt;li&gt;字节的换算。1B = 8bit; 1KB = 1024B; 1MB = 1024KbB; 1GB = 1024MB&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;进制&quot;&gt;进制&lt;/h2&gt;
&lt;p&gt;二进制换十进制：&lt;/p&gt;

&lt;p&gt;十进制换二进制&lt;/p&gt;

&lt;h2 id=&quot;数据类型&quot;&gt;数据类型&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;数据分类
&lt;img src=&quot;https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=864641880,910562823&amp;amp;fm=27&amp;amp;gp=0.jpg&quot; alt=&quot;数据分类&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;数据类型及所占字节。使用sizeof关键字获取字节数&lt;/li&gt;
  &lt;li&gt;常量
    &lt;ul&gt;
      &lt;li&gt;整型常量： 10、35、-33、78。&lt;/li&gt;
      &lt;li&gt;浮点型常量：C语言中对于所有实数默认都是8字节double类型，而float型占4字节。若要改为float类型，需在实数后加F或f。&lt;/li&gt;
      &lt;li&gt;字符型常量：字母、符号、转义字符。字符串是通过字符数组来存储，因此 &lt;code class=&quot;highlighter-rouge&quot;&gt;char i = &quot;AB&quot;&lt;/code&gt; 是错误的。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;补码。补码主要用来解决整数的存储，包括0、正整数、负整数。
    &lt;ul&gt;
      &lt;li&gt;十进制转换二进制补码。正整数的补码与原码相同。负整数补码先求该负数绝对值的二进制数，然后将所有位取反，末位加1，不够位数时左边补1。零的补码全是0。&lt;/li&gt;
      &lt;li&gt;二进制补码转换十进制数。如果最高位0，表明为正整数，原码和补码相同，直接转换为十进制。如果最高位是1，表明为负整数，则原码为：将所有为取反，然后末位加1。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;int型变量所能存储的范围。如果是short类型
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; #include &amp;lt;stdio.h&amp;gt;
	
 int main(void)
 {
     short a, b;
     int c, d;
		
     a = 32767;
     c = 214783647;
		
     b = a + 1;
     d = c + 1;
		
     printf(&quot;b = %d\n&quot;, b);
     printf(&quot;c = %d\n&quot;, d);
		
     return 0;
 }
 /*
     b = -32768
     d = -214783648;
 */
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;如果是unsigned short 类型。&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; include &amp;lt;stdio.h&amp;gt;
	
 int main(void)
 {
  unsigned short a, b;
	 
  a = 65535;
	 
  b = a + 1;
	 
  printf(&quot;b = %d\n&quot;, b);
	 
  return 0;	 
 }
 /*
 * b = 0
 */
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;int型和char型变量是如何相互赋值的。
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; #include &amp;lt;stdio.h&amp;gt;
	
 int main(void)
 {
  int i = 128;
  char ch = i;
	 
  printf(&quot;%d\n&quot;, ch);
	 
  return 0;
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;char 类型占1字节，就是8位，最大存储是 0111 1111，即127。将整数128赋值给它，就会“溢出”。输出的结果就是-128；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;什么是ASCII。ASCII 就是规定了某个字符使用哪个整数保存。&lt;/li&gt;
  &lt;li&gt;变量。
    &lt;ul&gt;
      &lt;li&gt;定义变量。变量名 = 要赋的值。&lt;code class=&quot;highlighter-rouge&quot;&gt;int i = 3;&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;变量的本质。
```
#include &lt;stdio.h&gt;
int main(void)
{
int i;
  i = 3;
 printf(&quot;i = %d\n&quot;, i);&lt;/stdio.h&gt;&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;return 0;
}
```
程序运行时变量i 存储在内存中。 程序运行完后，为这个程序分配的所有内存空间通通都会被释放掉，所谓“释放”并不是清空该内存空间，而是将内存空间标记为“可用”状态，使得系统在分配内存的时候可以将它重新分配给其他变量使用。
        * 为什么使用变量？ 为了方便对数据的存储和对内存单元的操作。
        * 变量的命名规则，变量名开头必须是字母或下划线，不能是数字。最好不要取单个字母作为变量。变量名中的字母区分大小写。变量名绝对不能使用关键字。变量名不能有空格。
        * 为什么必须初始化变量。不初始化就没有意义。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;各类型数据之间的混合运算。
    &lt;ul&gt;
      &lt;li&gt;自动转换。 按照数据长度增加的方向进行转换，以保证精度不降低。所有浮点运算都是以双精度进行的。char型和short型数据参与运算时，必须先转换int型。有符号型和无符号型混合运算时，有符号型要转换为无符号型，运算结果是无符号的。整型和浮点型混合运算时，整型先转换为浮点型，运算的结果是浮点型。在赋值运算中，当赋值号两边的数据类型不同时，右边的类型会转换为左边的类型，然后再赋给左边。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>Andy Xiong</name></author><category term="c" /><summary type="html">CPU如何操作内存。 CPU对内存进行操作通过三根总线: 控制总线、地址总线、数据总线 程序的运行 # include &amp;lt;stdio.h&amp;gt; int main(void) { printf(&quot;HelloWorld!\n&quot;); return 0; }</summary></entry></feed>